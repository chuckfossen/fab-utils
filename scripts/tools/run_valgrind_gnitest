#!/usr/bin/env python
#
# Run gnitest using valgrind
#

import argparse
import sys, subprocess

def check_args(args):
    return

def get_pattern_list(args, pattern_list):
    if args.gnitest_pattern != None:
        pattern_list += [ args.gnitest_pattern ]
        return

    p = subprocess.Popen([args.gnitest_exec, '--ascii', '--list'],
                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    suite_name = None
    test_name = None

    # being lazy about error checking
    for l in p.communicate()[0].split('\n'):
        # Criterion's --list --ascii format (as of v2.2.0)
        #
        # suite_name: X tests
        # |-- test_name
        # |-- test_name (disabled)
        # `-- test_name
        #
        if l and l[0].isalpha():
            (suite_name, blah) = l.split(':')
            if args.test_granularity == 'suite':
                pattern_list += [suite_name+'/'+'*']
                # print suite_name+'/'+'*'
        elif l and (l[0] == '|' or l[0] == '`'):
            if args.test_granularity == 'test':
                blah = l.split()
                if len(blah) == 2:
                    test_name = blah[1]
                    pattern_list += [suite_name+'/'+test_name]
                    # print '[RUN ] '+suite_name+'::'+test_name

def run_valgrind_gnitest(t, args):
    print '===\n=== Running '+t+'\n==='

    cmd  = [args.launcher]
    cmd += args.launcher_args.split()
    cmd += [args.valgrind_exec]
    cmd += args.valgrind_args.split()
    cmd += ['--suppressions='+args.valgrind_supps]
    cmd += [args.gnitest_exec]
    cmd += args.gnitest_args.split()
    cmd += ['--pattern='+t]

    p = subprocess.Popen(cmd,
                         stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    # Should get partial output to avoid running out of buffer space
    print p.communicate()[0]

    if p.returncode != 0:
        return 1

    return 0

def _main():
    parser = argparse.ArgumentParser(description='Run gnitest under valgrind.',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-g', '--gnitest-exec', dest='gnitest_exec',
                        action='store', default='gnitest',
                        help='gnitest executable')
    parser.add_argument('--gnitest-args', dest='gnitest_args',
                        action='store', default='-j1',
                        help='gnitest arguments')
    parser.add_argument('-l', '--launcher', dest='launcher',
                        action='store', default='srun',
                        choices=['srun', 'aprun'], help='job launcher')
    parser.add_argument('--launcher-args', dest='launcher_args',
                        action='store',
                        default='-N1 --ntasks=1 --exclusive --cpu_bind=none -t00:20:00',
                        help='job launcher arguments')
    parser.add_argument('-v', '--valgrind-exec', dest='valgrind_exec',
                        action='store', default='valgrind',
                        help='valgrind executable');
    parser.add_argument('--valgrind-args', dest='valgrind_args',
                        action='store',
                        default='-q --trace-children=yes --leak-check=full --show-leak-kinds=definite',
                        help='valgrind arguments');
    parser.add_argument('--valgrind-supps', dest='valgrind_supps',
                        action='store',
                        default='--suppressions=gnitest.supp',
                        help='valgrind suppressions file');
    parser.add_argument('--pattern', dest='gnitest_pattern',
                        action='store', help='gnitest pattern (ignores test granularity)')
    parser.add_argument('--test-granularity', dest='test_granularity',
                        action='store', default='suite',
                        choices=['test', 'suite'],
                        help='Granularity of gnitest jobs')

    args = parser.parse_args()

    check_args(args);

    pattern_list = list()
    err = 0
    get_pattern_list(args, pattern_list)
    for t in pattern_list:
        err += run_valgrind_gnitest(t, args)

    return err

if __name__ == '__main__':
    sys.exit(_main())

